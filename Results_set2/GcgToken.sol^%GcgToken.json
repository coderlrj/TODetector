{
 "vulnerabilities": {
  "callstack": [], 
  "time_dependency": [], 
  "reentrancy": [], 
  "Transaction-Order-Dependence(TOD)": true, 
  "integer_overflow": [
   "/oyente/oyente/test/ContractCodeBalance/GcgToken.sol:130:3: Warning: Integer Overflow.\n  function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success)\n  ^\nSpanning multiple lines.\nInteger Overflow occurs if:\n    frozen[_account] = 0\n    frozen[_account] = 0\n    emergencyFreeze = 0\n    _value = 0", 
   "/oyente/oyente/test/ContractCodeBalance/GcgToken.sol:244:14: Warning: Integer Overflow.\n      return ERC20Interface(_tokenAddress).transfer(owner, _value)\nInteger Overflow occurs if:\n    owner = 0"
  ], 
  "parity_multisig_bug_2": [], 
  "integer_underflow": [
   "/oyente/oyente/test/ContractCodeBalance/GcgToken.sol:134:13: Warning: Integer Underflow.\n            spender.receiveApproval(msg.sender, _value, this, _extraData)\nInteger Underflow occurs if:\n    frozen[_account] = 0\n    frozen[_account] = 0\n    emergencyFreeze = 0\n    _value = 0", 
   "/oyente/oyente/test/ContractCodeBalance/GcgToken.sol:123:10: Warning: Integer Underflow.\n    emit Approval(msg.sender, _spender, _value)\nInteger Underflow occurs if:\n    frozen[_account] = 0\n    frozen[_account] = 0\n    emergencyFreeze = 0\n    _value = 0"
  ], 
  "money_concurrency": [], 
  "assertion_failure": []
 }, 
 "evm_code_coverage": "81.2"
}